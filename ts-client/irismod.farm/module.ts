// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgStake } from "./types/farm/tx";
import { MsgHarvest } from "./types/farm/tx";
import { MsgCreatePool } from "./types/farm/tx";
import { MsgAdjustPool } from "./types/farm/tx";
import { MsgDestroyPool } from "./types/farm/tx";
import { MsgCreatePoolWithCommunityPool } from "./types/farm/tx";
import { MsgUnstake } from "./types/farm/tx";

import { FarmPool as typeFarmPool} from "./types"
import { RewardRule as typeRewardRule} from "./types"
import { FarmInfo as typeFarmInfo} from "./types"
import { Params as typeParams} from "./types"
import { EscrowInfo as typeEscrowInfo} from "./types"
import { CommunityPoolCreateFarmProposal as typeCommunityPoolCreateFarmProposal} from "./types"
import { FarmPoolEntry as typeFarmPoolEntry} from "./types"
import { LockedInfo as typeLockedInfo} from "./types"

export { MsgStake, MsgHarvest, MsgCreatePool, MsgAdjustPool, MsgDestroyPool, MsgCreatePoolWithCommunityPool, MsgUnstake };

type sendMsgStakeParams = {
  value: MsgStake,
  fee?: StdFee,
  memo?: string
};

type sendMsgHarvestParams = {
  value: MsgHarvest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePoolParams = {
  value: MsgCreatePool,
  fee?: StdFee,
  memo?: string
};

type sendMsgAdjustPoolParams = {
  value: MsgAdjustPool,
  fee?: StdFee,
  memo?: string
};

type sendMsgDestroyPoolParams = {
  value: MsgDestroyPool,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePoolWithCommunityPoolParams = {
  value: MsgCreatePoolWithCommunityPool,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnstakeParams = {
  value: MsgUnstake,
  fee?: StdFee,
  memo?: string
};


type msgStakeParams = {
  value: MsgStake,
};

type msgHarvestParams = {
  value: MsgHarvest,
};

type msgCreatePoolParams = {
  value: MsgCreatePool,
};

type msgAdjustPoolParams = {
  value: MsgAdjustPool,
};

type msgDestroyPoolParams = {
  value: MsgDestroyPool,
};

type msgCreatePoolWithCommunityPoolParams = {
  value: MsgCreatePoolWithCommunityPool,
};

type msgUnstakeParams = {
  value: MsgUnstake,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgStake({ value, fee, memo }: sendMsgStakeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgStake: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgStake({ value: MsgStake.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgStake: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgHarvest({ value, fee, memo }: sendMsgHarvestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgHarvest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgHarvest({ value: MsgHarvest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgHarvest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePool({ value, fee, memo }: sendMsgCreatePoolParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePool: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreatePool({ value: MsgCreatePool.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePool: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAdjustPool({ value, fee, memo }: sendMsgAdjustPoolParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAdjustPool: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAdjustPool({ value: MsgAdjustPool.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAdjustPool: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDestroyPool({ value, fee, memo }: sendMsgDestroyPoolParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDestroyPool: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDestroyPool({ value: MsgDestroyPool.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDestroyPool: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePoolWithCommunityPool({ value, fee, memo }: sendMsgCreatePoolWithCommunityPoolParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePoolWithCommunityPool: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreatePoolWithCommunityPool({ value: MsgCreatePoolWithCommunityPool.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePoolWithCommunityPool: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnstake({ value, fee, memo }: sendMsgUnstakeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnstake: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnstake({ value: MsgUnstake.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnstake: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgStake({ value }: msgStakeParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgStake", value: MsgStake.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgStake: Could not create message: ' + e.message)
			}
		},
		
		msgHarvest({ value }: msgHarvestParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgHarvest", value: MsgHarvest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgHarvest: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePool({ value }: msgCreatePoolParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgCreatePool", value: MsgCreatePool.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePool: Could not create message: ' + e.message)
			}
		},
		
		msgAdjustPool({ value }: msgAdjustPoolParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgAdjustPool", value: MsgAdjustPool.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAdjustPool: Could not create message: ' + e.message)
			}
		},
		
		msgDestroyPool({ value }: msgDestroyPoolParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgDestroyPool", value: MsgDestroyPool.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDestroyPool: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePoolWithCommunityPool({ value }: msgCreatePoolWithCommunityPoolParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgCreatePoolWithCommunityPool", value: MsgCreatePoolWithCommunityPool.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePoolWithCommunityPool: Could not create message: ' + e.message)
			}
		},
		
		msgUnstake({ value }: msgUnstakeParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.farm.MsgUnstake", value: MsgUnstake.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnstake: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						FarmPool: getStructure(typeFarmPool.fromPartial({})),
						RewardRule: getStructure(typeRewardRule.fromPartial({})),
						FarmInfo: getStructure(typeFarmInfo.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						EscrowInfo: getStructure(typeEscrowInfo.fromPartial({})),
						CommunityPoolCreateFarmProposal: getStructure(typeCommunityPoolCreateFarmProposal.fromPartial({})),
						FarmPoolEntry: getStructure(typeFarmPoolEntry.fromPartial({})),
						LockedInfo: getStructure(typeLockedInfo.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			IrismodFarm: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;