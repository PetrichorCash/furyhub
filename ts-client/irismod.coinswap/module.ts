// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgSwapOrder } from "./types/coinswap/tx";
import { MsgRemoveUnilateralLiquidity } from "./types/coinswap/tx";
import { MsgAddUnilateralLiquidity } from "./types/coinswap/tx";
import { MsgRemoveLiquidity } from "./types/coinswap/tx";
import { MsgAddLiquidity } from "./types/coinswap/tx";

import { Input as typeInput} from "./types"
import { Output as typeOutput} from "./types"
import { Pool as typePool} from "./types"
import { Params as typeParams} from "./types"
import { PoolInfo as typePoolInfo} from "./types"

export { MsgSwapOrder, MsgRemoveUnilateralLiquidity, MsgAddUnilateralLiquidity, MsgRemoveLiquidity, MsgAddLiquidity };

type sendMsgSwapOrderParams = {
  value: MsgSwapOrder,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveUnilateralLiquidityParams = {
  value: MsgRemoveUnilateralLiquidity,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddUnilateralLiquidityParams = {
  value: MsgAddUnilateralLiquidity,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveLiquidityParams = {
  value: MsgRemoveLiquidity,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddLiquidityParams = {
  value: MsgAddLiquidity,
  fee?: StdFee,
  memo?: string
};


type msgSwapOrderParams = {
  value: MsgSwapOrder,
};

type msgRemoveUnilateralLiquidityParams = {
  value: MsgRemoveUnilateralLiquidity,
};

type msgAddUnilateralLiquidityParams = {
  value: MsgAddUnilateralLiquidity,
};

type msgRemoveLiquidityParams = {
  value: MsgRemoveLiquidity,
};

type msgAddLiquidityParams = {
  value: MsgAddLiquidity,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgSwapOrder({ value, fee, memo }: sendMsgSwapOrderParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSwapOrder: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSwapOrder({ value: MsgSwapOrder.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSwapOrder: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveUnilateralLiquidity({ value, fee, memo }: sendMsgRemoveUnilateralLiquidityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveUnilateralLiquidity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRemoveUnilateralLiquidity({ value: MsgRemoveUnilateralLiquidity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveUnilateralLiquidity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddUnilateralLiquidity({ value, fee, memo }: sendMsgAddUnilateralLiquidityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddUnilateralLiquidity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddUnilateralLiquidity({ value: MsgAddUnilateralLiquidity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddUnilateralLiquidity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveLiquidity({ value, fee, memo }: sendMsgRemoveLiquidityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveLiquidity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRemoveLiquidity({ value: MsgRemoveLiquidity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveLiquidity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddLiquidity({ value, fee, memo }: sendMsgAddLiquidityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddLiquidity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddLiquidity({ value: MsgAddLiquidity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddLiquidity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgSwapOrder({ value }: msgSwapOrderParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.coinswap.MsgSwapOrder", value: MsgSwapOrder.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSwapOrder: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveUnilateralLiquidity({ value }: msgRemoveUnilateralLiquidityParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.coinswap.MsgRemoveUnilateralLiquidity", value: MsgRemoveUnilateralLiquidity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveUnilateralLiquidity: Could not create message: ' + e.message)
			}
		},
		
		msgAddUnilateralLiquidity({ value }: msgAddUnilateralLiquidityParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.coinswap.MsgAddUnilateralLiquidity", value: MsgAddUnilateralLiquidity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddUnilateralLiquidity: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveLiquidity({ value }: msgRemoveLiquidityParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.coinswap.MsgRemoveLiquidity", value: MsgRemoveLiquidity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveLiquidity: Could not create message: ' + e.message)
			}
		},
		
		msgAddLiquidity({ value }: msgAddLiquidityParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.coinswap.MsgAddLiquidity", value: MsgAddLiquidity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddLiquidity: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Input: getStructure(typeInput.fromPartial({})),
						Output: getStructure(typeOutput.fromPartial({})),
						Pool: getStructure(typePool.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						PoolInfo: getStructure(typePoolInfo.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			IrismodCoinswap: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;