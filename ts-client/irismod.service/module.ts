// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateRequestContext } from "./types/service/tx";
import { MsgDefineService } from "./types/service/tx";
import { MsgDisableServiceBinding } from "./types/service/tx";
import { MsgEnableServiceBinding } from "./types/service/tx";
import { MsgStartRequestContext } from "./types/service/tx";
import { MsgUpdateServiceBinding } from "./types/service/tx";
import { MsgCallService } from "./types/service/tx";
import { MsgPauseRequestContext } from "./types/service/tx";
import { MsgBindService } from "./types/service/tx";
import { MsgRefundServiceDeposit } from "./types/service/tx";
import { MsgRespondService } from "./types/service/tx";
import { MsgKillRequestContext } from "./types/service/tx";
import { MsgSetWithdrawAddress } from "./types/service/tx";
import { MsgWithdrawEarnedFees } from "./types/service/tx";

import { ServiceDefinition as typeServiceDefinition} from "./types"
import { ServiceBinding as typeServiceBinding} from "./types"
import { RequestContext as typeRequestContext} from "./types"
import { Request as typeRequest} from "./types"
import { CompactRequest as typeCompactRequest} from "./types"
import { Response as typeResponse} from "./types"
import { Pricing as typePricing} from "./types"
import { PromotionByTime as typePromotionByTime} from "./types"
import { PromotionByVolume as typePromotionByVolume} from "./types"
import { Params as typeParams} from "./types"

export { MsgUpdateRequestContext, MsgDefineService, MsgDisableServiceBinding, MsgEnableServiceBinding, MsgStartRequestContext, MsgUpdateServiceBinding, MsgCallService, MsgPauseRequestContext, MsgBindService, MsgRefundServiceDeposit, MsgRespondService, MsgKillRequestContext, MsgSetWithdrawAddress, MsgWithdrawEarnedFees };

type sendMsgUpdateRequestContextParams = {
  value: MsgUpdateRequestContext,
  fee?: StdFee,
  memo?: string
};

type sendMsgDefineServiceParams = {
  value: MsgDefineService,
  fee?: StdFee,
  memo?: string
};

type sendMsgDisableServiceBindingParams = {
  value: MsgDisableServiceBinding,
  fee?: StdFee,
  memo?: string
};

type sendMsgEnableServiceBindingParams = {
  value: MsgEnableServiceBinding,
  fee?: StdFee,
  memo?: string
};

type sendMsgStartRequestContextParams = {
  value: MsgStartRequestContext,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateServiceBindingParams = {
  value: MsgUpdateServiceBinding,
  fee?: StdFee,
  memo?: string
};

type sendMsgCallServiceParams = {
  value: MsgCallService,
  fee?: StdFee,
  memo?: string
};

type sendMsgPauseRequestContextParams = {
  value: MsgPauseRequestContext,
  fee?: StdFee,
  memo?: string
};

type sendMsgBindServiceParams = {
  value: MsgBindService,
  fee?: StdFee,
  memo?: string
};

type sendMsgRefundServiceDepositParams = {
  value: MsgRefundServiceDeposit,
  fee?: StdFee,
  memo?: string
};

type sendMsgRespondServiceParams = {
  value: MsgRespondService,
  fee?: StdFee,
  memo?: string
};

type sendMsgKillRequestContextParams = {
  value: MsgKillRequestContext,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetWithdrawAddressParams = {
  value: MsgSetWithdrawAddress,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawEarnedFeesParams = {
  value: MsgWithdrawEarnedFees,
  fee?: StdFee,
  memo?: string
};


type msgUpdateRequestContextParams = {
  value: MsgUpdateRequestContext,
};

type msgDefineServiceParams = {
  value: MsgDefineService,
};

type msgDisableServiceBindingParams = {
  value: MsgDisableServiceBinding,
};

type msgEnableServiceBindingParams = {
  value: MsgEnableServiceBinding,
};

type msgStartRequestContextParams = {
  value: MsgStartRequestContext,
};

type msgUpdateServiceBindingParams = {
  value: MsgUpdateServiceBinding,
};

type msgCallServiceParams = {
  value: MsgCallService,
};

type msgPauseRequestContextParams = {
  value: MsgPauseRequestContext,
};

type msgBindServiceParams = {
  value: MsgBindService,
};

type msgRefundServiceDepositParams = {
  value: MsgRefundServiceDeposit,
};

type msgRespondServiceParams = {
  value: MsgRespondService,
};

type msgKillRequestContextParams = {
  value: MsgKillRequestContext,
};

type msgSetWithdrawAddressParams = {
  value: MsgSetWithdrawAddress,
};

type msgWithdrawEarnedFeesParams = {
  value: MsgWithdrawEarnedFees,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateRequestContext({ value, fee, memo }: sendMsgUpdateRequestContextParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRequestContext: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateRequestContext({ value: MsgUpdateRequestContext.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRequestContext: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDefineService({ value, fee, memo }: sendMsgDefineServiceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDefineService: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDefineService({ value: MsgDefineService.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDefineService: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDisableServiceBinding({ value, fee, memo }: sendMsgDisableServiceBindingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDisableServiceBinding: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDisableServiceBinding({ value: MsgDisableServiceBinding.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDisableServiceBinding: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgEnableServiceBinding({ value, fee, memo }: sendMsgEnableServiceBindingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgEnableServiceBinding: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgEnableServiceBinding({ value: MsgEnableServiceBinding.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgEnableServiceBinding: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgStartRequestContext({ value, fee, memo }: sendMsgStartRequestContextParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgStartRequestContext: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgStartRequestContext({ value: MsgStartRequestContext.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgStartRequestContext: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateServiceBinding({ value, fee, memo }: sendMsgUpdateServiceBindingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateServiceBinding: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateServiceBinding({ value: MsgUpdateServiceBinding.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateServiceBinding: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCallService({ value, fee, memo }: sendMsgCallServiceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCallService: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCallService({ value: MsgCallService.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCallService: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPauseRequestContext({ value, fee, memo }: sendMsgPauseRequestContextParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPauseRequestContext: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgPauseRequestContext({ value: MsgPauseRequestContext.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPauseRequestContext: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBindService({ value, fee, memo }: sendMsgBindServiceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBindService: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBindService({ value: MsgBindService.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBindService: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRefundServiceDeposit({ value, fee, memo }: sendMsgRefundServiceDepositParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRefundServiceDeposit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRefundServiceDeposit({ value: MsgRefundServiceDeposit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRefundServiceDeposit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRespondService({ value, fee, memo }: sendMsgRespondServiceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRespondService: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRespondService({ value: MsgRespondService.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRespondService: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgKillRequestContext({ value, fee, memo }: sendMsgKillRequestContextParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgKillRequestContext: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgKillRequestContext({ value: MsgKillRequestContext.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgKillRequestContext: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetWithdrawAddress({ value, fee, memo }: sendMsgSetWithdrawAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetWithdrawAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetWithdrawAddress({ value: MsgSetWithdrawAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetWithdrawAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdrawEarnedFees({ value, fee, memo }: sendMsgWithdrawEarnedFeesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawEarnedFees: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgWithdrawEarnedFees({ value: MsgWithdrawEarnedFees.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawEarnedFees: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateRequestContext({ value }: msgUpdateRequestContextParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgUpdateRequestContext", value: MsgUpdateRequestContext.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRequestContext: Could not create message: ' + e.message)
			}
		},
		
		msgDefineService({ value }: msgDefineServiceParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgDefineService", value: MsgDefineService.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDefineService: Could not create message: ' + e.message)
			}
		},
		
		msgDisableServiceBinding({ value }: msgDisableServiceBindingParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgDisableServiceBinding", value: MsgDisableServiceBinding.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDisableServiceBinding: Could not create message: ' + e.message)
			}
		},
		
		msgEnableServiceBinding({ value }: msgEnableServiceBindingParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgEnableServiceBinding", value: MsgEnableServiceBinding.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgEnableServiceBinding: Could not create message: ' + e.message)
			}
		},
		
		msgStartRequestContext({ value }: msgStartRequestContextParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgStartRequestContext", value: MsgStartRequestContext.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgStartRequestContext: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateServiceBinding({ value }: msgUpdateServiceBindingParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgUpdateServiceBinding", value: MsgUpdateServiceBinding.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateServiceBinding: Could not create message: ' + e.message)
			}
		},
		
		msgCallService({ value }: msgCallServiceParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgCallService", value: MsgCallService.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCallService: Could not create message: ' + e.message)
			}
		},
		
		msgPauseRequestContext({ value }: msgPauseRequestContextParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgPauseRequestContext", value: MsgPauseRequestContext.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPauseRequestContext: Could not create message: ' + e.message)
			}
		},
		
		msgBindService({ value }: msgBindServiceParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgBindService", value: MsgBindService.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBindService: Could not create message: ' + e.message)
			}
		},
		
		msgRefundServiceDeposit({ value }: msgRefundServiceDepositParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgRefundServiceDeposit", value: MsgRefundServiceDeposit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRefundServiceDeposit: Could not create message: ' + e.message)
			}
		},
		
		msgRespondService({ value }: msgRespondServiceParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgRespondService", value: MsgRespondService.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRespondService: Could not create message: ' + e.message)
			}
		},
		
		msgKillRequestContext({ value }: msgKillRequestContextParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgKillRequestContext", value: MsgKillRequestContext.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgKillRequestContext: Could not create message: ' + e.message)
			}
		},
		
		msgSetWithdrawAddress({ value }: msgSetWithdrawAddressParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgSetWithdrawAddress", value: MsgSetWithdrawAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetWithdrawAddress: Could not create message: ' + e.message)
			}
		},
		
		msgWithdrawEarnedFees({ value }: msgWithdrawEarnedFeesParams): EncodeObject {
			try {
				return { typeUrl: "/irismod.service.MsgWithdrawEarnedFees", value: MsgWithdrawEarnedFees.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawEarnedFees: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						ServiceDefinition: getStructure(typeServiceDefinition.fromPartial({})),
						ServiceBinding: getStructure(typeServiceBinding.fromPartial({})),
						RequestContext: getStructure(typeRequestContext.fromPartial({})),
						Request: getStructure(typeRequest.fromPartial({})),
						CompactRequest: getStructure(typeCompactRequest.fromPartial({})),
						Response: getStructure(typeResponse.fromPartial({})),
						Pricing: getStructure(typePricing.fromPartial({})),
						PromotionByTime: getStructure(typePromotionByTime.fromPartial({})),
						PromotionByVolume: getStructure(typePromotionByVolume.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			IrismodService: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;